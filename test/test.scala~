package jp.gihyo.spark.mllib.classification

import org.apache.spark.{SparkConf,SparkContext}
import org.apache.spark.classfication.LogisticRegressionWithBFGS
import org.apache.spark.mllib.evaluation.{BinaryClassificationMetrics,MulticlassMetric}
import org.apache.spark.mllib.feature.{HashingTF,StandardScalar}
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.util.MLUtils

object SmsSpamMLlib{
	def main(args: Array[String]){
		val sparkConf = new SparkConf().setMaster("local").setAppName("SmsSpamMLlib")
		val sc = new SparkContext(SparkConf)

		val hashingTF = new HashingTF(100000)
	
		val data = sc.textFile("SMSSpamCollection")

		.map(_.split("\\s"))

		.map(v => new LabeledPoint(if (v(0) == "Spam") 1.0 else 0.0, hashingTF.transform(v.drop(1))))

		val scaler = new StandardScaler().fit(data.map(_.features))
		val scaledData = data.map(v => v.copy(features = scaler.transform(v.features)))

		val lr = new LogisticRegressionWithBFGS()
		lr.optimizer.setRegParam(2.0)

		val k = 4
		val predictions = MLUtils.Fold(scaledData, k, 1).map{case (training, test) =>

		val model = lr.run(training) 

		test.map(lp => (model.predict(lp.features),lp.label))
		}

	val result = predictions.reduce((rdd1, rdd2) => rdd1.union(rdd2))
	

	val binaryMetrics = new BinaryClassficationMetrics(result)
	println("AUC: ${binaryMetrics.areaUnderROC()}")

	val multiclassMetrics = new MulticlassMetrics(result)
	println("ConfusionMatrix: ${multiclassMetrics.confusionMatrix}")

	println("True-positive rate of 0.0 = ham: ${multiclassMetrics.truePositiveRate(0.0)}")
	println("True-positive rate of 1.0 = spam: ${multiclassMetrics.truePositiveRate(1.0)}")

	println("False-positive rate of 0.0 = ham: ${multiclassMetrics.falsePositiveRate(0.0)}")
	println("False-positive rate of 1.0 = spam: ${multiclassMetrics.falsePositiveRate(1.0)}")

	println("Precision of 0.0 = ham: ${multiclassMetrics.precision(0.0)}")
	println("Precision of 1.0 = spam:${multiclassMetrics.precision(1.0)}")

	println("Recall of 0.0 = ham: ${multiclassMetrics.recall(0.0)}")
	println("Recall of 1.0 = spam:${multiclassMetrics.recall(1.0)}")	

	sc.stop()
	}
}



